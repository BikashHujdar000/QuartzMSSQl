-- QRTZ_JOB_DETAILS Table
IF NOT EXISTS (
    SELECT * FROM sysobjects WHERE name = 'QRTZ_JOB_DETAILS' AND xtype = 'U'
)
CREATE TABLE QRTZ_JOB_DETAILS (
    SCHED_NAME NVARCHAR(120) NOT NULL,
    JOB_NAME NVARCHAR(200) NOT NULL,
    JOB_GROUP NVARCHAR(200) NOT NULL,
    DESCRIPTION NVARCHAR(250) NULL,
    JOB_CLASS_NAME NVARCHAR(250) NOT NULL,
    IS_DURABLE BIT NOT NULL,
    IS_NONCONCURRENT BIT NOT NULL,
    IS_UPDATE_DATA BIT NOT NULL,
    REQUESTS_RECOVERY BIT NOT NULL,
    JOB_DATA VARBINARY(MAX) NULL,
    PRIMARY KEY (SCHED_NAME, JOB_NAME, JOB_GROUP)
);

-- QRTZ_TRIGGERS Table
IF NOT EXISTS (
    SELECT * FROM sysobjects WHERE name = 'QRTZ_TRIGGERS' AND xtype = 'U'
)
CREATE TABLE QRTZ_TRIGGERS (
    SCHED_NAME NVARCHAR(120) NOT NULL,
    TRIGGER_NAME NVARCHAR(200) NOT NULL,
    TRIGGER_GROUP NVARCHAR(200) NOT NULL,
    JOB_NAME NVARCHAR(200) NOT NULL,
    JOB_GROUP NVARCHAR(200) NOT NULL,
    DESCRIPTION NVARCHAR(250) NULL,
    NEXT_FIRE_TIME BIGINT NULL,
    PREV_FIRE_TIME BIGINT NULL,
    PRIORITY INT NULL,
    TRIGGER_STATE NVARCHAR(16) NOT NULL,
    TRIGGER_TYPE NVARCHAR(8) NOT NULL,
    START_TIME BIGINT NOT NULL,
    END_TIME BIGINT NULL,
    CALENDAR_NAME NVARCHAR(200) NULL,
    MISFIRE_INSTR SMALLINT NULL,
    JOB_DATA VARBINARY(MAX) NULL,
    PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME, JOB_NAME, JOB_GROUP)
        REFERENCES QRTZ_JOB_DETAILS(SCHED_NAME, JOB_NAME, JOB_GROUP)
);

-- QRTZ_SIMPLE_TRIGGERS Table
IF NOT EXISTS (
    SELECT * FROM sysobjects WHERE name = 'QRTZ_SIMPLE_TRIGGERS' AND xtype = 'U'
)
CREATE TABLE QRTZ_SIMPLE_TRIGGERS (
    SCHED_NAME NVARCHAR(120) NOT NULL,
    TRIGGER_NAME NVARCHAR(200) NOT NULL,
    TRIGGER_GROUP NVARCHAR(200) NOT NULL,
    REPEAT_COUNT BIGINT NOT NULL,
    REPEAT_INTERVAL BIGINT NOT NULL,
    TIMES_TRIGGERED BIGINT NOT NULL,
    PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
        REFERENCES QRTZ_TRIGGERS(SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
);

-- QRTZ_CRON_TRIGGERS Table
IF NOT EXISTS (
    SELECT * FROM sysobjects WHERE name = 'QRTZ_CRON_TRIGGERS' AND xtype = 'U'
)
CREATE TABLE QRTZ_CRON_TRIGGERS (
    SCHED_NAME NVARCHAR(120) NOT NULL,
    TRIGGER_NAME NVARCHAR(200) NOT NULL,
    TRIGGER_GROUP NVARCHAR(200) NOT NULL,
    CRON_EXPRESSION NVARCHAR(120) NOT NULL,
    TIME_ZONE_ID NVARCHAR(80) NULL,
    PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
        REFERENCES QRTZ_TRIGGERS(SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
);

-- QRTZ_SIMPROP_TRIGGERS Table
IF NOT EXISTS (
    SELECT * FROM sysobjects WHERE name = 'QRTZ_SIMPROP_TRIGGERS' AND xtype = 'U'
)
CREATE TABLE QRTZ_SIMPROP_TRIGGERS (
    SCHED_NAME NVARCHAR(120) NOT NULL,
    TRIGGER_NAME NVARCHAR(200) NOT NULL,
    TRIGGER_GROUP NVARCHAR(200) NOT NULL,
    STR_PROP_1 NVARCHAR(512) NULL,
    STR_PROP_2 NVARCHAR(512) NULL,
    STR_PROP_3 NVARCHAR(512) NULL,
    INT_PROP_1 INT NULL,
    INT_PROP_2 INT NULL,
    LONG_PROP_1 BIGINT NULL,
    LONG_PROP_2 BIGINT NULL,
    DEC_PROP_1 NUMERIC(13,4) NULL,
    DEC_PROP_2 NUMERIC(13,4) NULL,
    BOOL_PROP_1 BIT NULL,
    BOOL_PROP_2 BIT NULL,
    PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
        REFERENCES QRTZ_TRIGGERS(SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
);

-- QRTZ_BLOB_TRIGGERS Table
IF NOT EXISTS (
    SELECT * FROM sysobjects WHERE name = 'QRTZ_BLOB_TRIGGERS' AND xtype = 'U'
)
CREATE TABLE QRTZ_BLOB_TRIGGERS (
    SCHED_NAME NVARCHAR(120) NOT NULL,
    TRIGGER_NAME NVARCHAR(200) NOT NULL,
    TRIGGER_GROUP NVARCHAR(200) NOT NULL,
    BLOB_DATA VARBINARY(MAX) NULL,
    PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
        REFERENCES QRTZ_TRIGGERS(SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
);

-- QRTZ_CALENDARS Table
IF NOT EXISTS (
    SELECT * FROM sysobjects WHERE name = 'QRTZ_CALENDARS' AND xtype = 'U'
)
CREATE TABLE QRTZ_CALENDARS (
    SCHED_NAME NVARCHAR(120) NOT NULL,
    CALENDAR_NAME NVARCHAR(200) NOT NULL,
    CALENDAR VARBINARY(MAX) NOT NULL,
    PRIMARY KEY (SCHED_NAME, CALENDAR_NAME)
);

-- QRTZ_PAUSED_TRIGGER_GRPS Table
IF NOT EXISTS (
    SELECT * FROM sysobjects WHERE name = 'QRTZ_PAUSED_TRIGGER_GRPS' AND xtype = 'U'
)
CREATE TABLE QRTZ_PAUSED_TRIGGER_GRPS (
    SCHED_NAME NVARCHAR(120) NOT NULL,
    TRIGGER_GROUP NVARCHAR(200) NOT NULL,
    PRIMARY KEY (SCHED_NAME, TRIGGER_GROUP)
);

-- QRTZ_FIRED_TRIGGERS Table
IF NOT EXISTS (
    SELECT * FROM sysobjects WHERE name = 'QRTZ_FIRED_TRIGGERS' AND xtype = 'U'
)
CREATE TABLE QRTZ_FIRED_TRIGGERS (
    SCHED_NAME NVARCHAR(120) NOT NULL,
    ENTRY_ID NVARCHAR(95) NOT NULL,
    TRIGGER_NAME NVARCHAR(200) NOT NULL,
    TRIGGER_GROUP NVARCHAR(200) NOT NULL,
    INSTANCE_NAME NVARCHAR(200) NOT NULL,
    FIRED_TIME BIGINT NOT NULL,
    SCHED_TIME BIGINT NOT NULL,
    PRIORITY INT NOT NULL,
    STATE NVARCHAR(16) NOT NULL,
    JOB_NAME NVARCHAR(200) NULL,
    JOB_GROUP NVARCHAR(200) NULL,
    IS_NONCONCURRENT BIT NOT NULL,
    REQUESTS_RECOVERY BIT NOT NULL,
    PRIMARY KEY (SCHED_NAME, ENTRY_ID)
);

-- QRTZ_SCHEDULER_STATE Table
IF NOT EXISTS (
    SELECT * FROM sysobjects WHERE name = 'QRTZ_SCHEDULER_STATE' AND xtype = 'U'
)
CREATE TABLE QRTZ_SCHEDULER_STATE (
    SCHED_NAME NVARCHAR(120) NOT NULL,
    INSTANCE_NAME NVARCHAR(200) NOT NULL,
    LAST_CHECKIN_TIME BIGINT NOT NULL,
    CHECKIN_INTERVAL BIGINT NOT NULL,
    PRIMARY KEY (SCHED_NAME, INSTANCE_NAME)
);

-- QRTZ_LOCKS Table
IF NOT EXISTS (
    SELECT * FROM sysobjects WHERE name = 'QRTZ_LOCKS' AND xtype = 'U'
)
CREATE TABLE QRTZ_LOCKS (
    SCHED_NAME NVARCHAR(120) NOT NULL,
    LOCK_NAME NVARCHAR(40) NOT NULL,
    PRIMARY KEY (SCHED_NAME, LOCK_NAME)
);